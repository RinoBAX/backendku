datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               Int                @id @default(autoincrement())
  nama             String
  email            String             @unique
  password         String
  kodeReferral     String             @unique
  statusRegistrasi RegistrationStatus @default(PENDING)
  balance          Decimal            @default(0)
  picture          String?
  role             Role               @default(USER) // <-- TAMBAHKAN BARIS INI
  uplineId         Int?
  upline           User?              @relation("ReferralTree", fields: [uplineId], references: [id])
  downlines        User[]             @relation("ReferralTree")

  projectSubmissions ProjectSubmission[]
  withdrawals        Withdrawal[]
  transactions       Transaction[]

  tglDibuat DateTime @default(now())

  @@map("users")
}

model Project {
  id          Int                 @id @default(autoincrement())
  namaProyek  String
  iconUrl     String
  nilaiProyek Decimal
  fields      ProjectField[]
  submissions ProjectSubmission[]
  tglDibuat   DateTime            @default(now())

  @@map("projects")
}

model ProjectField {
  id         Int       @id @default(autoincrement())
  namaField  String
  tipeField  FieldType
  wajibDiisi Boolean   @default(true)

  projectId Int
  project   Project @relation(fields: [projectId], references: [id])

  dataEntries SubmissionData[]

  @@map("project_fields")
}

model ProjectSubmission {
  id        Int              @id @default(autoincrement())
  status    SubmissionStatus @default(PENDING)
  noteAdmin String?

  userId Int
  user   User @relation(fields: [userId], references: [id])

  projectId Int
  project   Project @relation(fields: [projectId], references: [id])

  dataEntries  SubmissionData[]
  transactions Transaction[]

  tglDikirim  DateTime  @default(now())
  tglDiproses DateTime?

  @@map("project_submissions")
}

model SubmissionData {
  id    Int    @id @default(autoincrement())
  nilai String

  submissionId Int
  submission   ProjectSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  fieldId Int
  field   ProjectField @relation(fields: [fieldId], references: [id])

  @@map("submission_data")
}

model Transaction {
  id     Int             @id @default(autoincrement())
  tipe   TransactionType
  jumlah Decimal

  userId Int
  user   User @relation(fields: [userId], references: [id])

  submissionId Int?
  submission   ProjectSubmission? @relation(fields: [submissionId], references: [id])

  withdrawalId Int?        @unique
  withdrawal   Withdrawal? @relation(fields: [withdrawalId], references: [id])

  transactionDate DateTime @default(now())

  @@map("transactions")
}

model Withdrawal {
  id              Int              @id @default(autoincrement())
  totalWithdrawal Decimal
  status          WithdrawalStatus @default(PENDING)

  userId Int
  user   User @relation(fields: [userId], references: [id])

  transaction Transaction?

  tglDiajukan DateTime  @default(now())
  tglDiproses DateTime?

  @@map("withdrawals")
}

enum RegistrationStatus {
  PENDING
  APPROVED
}

enum FieldType {
  TEXT
  TEXTAREA
  IMAGE
  FILE
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TransactionType {
  PENGERJAAN
  KOMISI_UPLINE1
  KOMISI_UPLINE2
  PENARIKAN
}

enum Role {
  USER
  ADMIN
}